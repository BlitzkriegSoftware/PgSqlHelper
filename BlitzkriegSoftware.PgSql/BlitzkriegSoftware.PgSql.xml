<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlitzkriegSoftware.PgSql</name>
    </assembly>
    <members>
        <member name="T:BlitzkriegSoftware.PgSql.PgSqlHelper">
            <summary>
            ADO.NET Helper for PostgreSQL
            <para>Uses: <c>Npgsql</c> NuGet Package</para>
            </summary>
        </member>
        <member name="F:BlitzkriegSoftware.PgSql.PgSqlHelper.Timeout_Default">
            <summary>
            Default Timeout (seconds)
            </summary>
        </member>
        <member name="M:BlitzkriegSoftware.PgSql.PgSqlHelper.ExecuteSqlWithParametersNoReturn(System.String,System.String,System.Collections.Generic.List{Npgsql.NpgsqlParameter},System.Int32)">
            <summary>
            Execute SQL with parameters with no return of data or values
            </summary>
            <param name="connectionString">Connection String</param>
            <param name="SQL">SQL Statement</param>
            <param name="parameters">Parameters</param>
            <param name="TimeOut">Timeout in seconds, with default</param>
            <returns>Rows affected</returns>
        </member>
        <member name="M:BlitzkriegSoftware.PgSql.PgSqlHelper.ExecuteSqlWithParametersToDataTable(System.String,System.String,System.Collections.Generic.List{Npgsql.NpgsqlParameter},System.Int32)">
            <summary>
            Execute SQL with parameters with a DataTable return
            </summary>
            <param name="connectionString">Connection String</param>
            <param name="SQL">SQL Statement</param>
            <param name="parameters">Parameters</param>
            <param name="TimeOut">Timeout in seconds, with default</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:BlitzkriegSoftware.PgSql.PgSqlHelper.ExecuteSqlWithParametersToScaler``1(System.String,System.String,System.Collections.Generic.List{Npgsql.NpgsqlParameter},System.Int32)">
            <summary>
            Execute a parameterized SQL statement with a single value return
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="connectionString">Connection String</param>
            <param name="SQL"></param>
            <param name="parameters"></param>
            <param name="TimeOut"></param>
            <returns>T</returns>
        </member>
        <member name="M:BlitzkriegSoftware.PgSql.PgSqlHelper.HasRows(System.Data.DataTable)">
            <summary>
            Does data table have rows?
            </summary>
            <param name="dt">DataTable</param>
            <returns>true if so</returns>
        </member>
        <member name="M:BlitzkriegSoftware.PgSql.PgSqlHelper.HasTables(System.Data.DataSet)">
            <summary>
            Does data set have any tables?
            </summary>
            <param name="ds">DataSet</param>
            <returns>true if so</returns>
        </member>
        <member name="M:BlitzkriegSoftware.PgSql.PgSqlHelper.FixSqlInText(System.String,System.String,System.Char)">
            <summary>
            Fixes comma separated lists to be quoted correctly and removes last list delimiter for SQL 'IN' clauses
            </summary>
            <param name="inText">text to process</param>
            <param name="defaultValue">default value (can be empty)</param>
            <param name="textDelimiter">delimiter to wrap around each item</param>
            <returns>fixed up list</returns>
        </member>
        <member name="M:BlitzkriegSoftware.PgSql.PgSqlHelper.CleanParameters(System.Collections.Generic.List{Npgsql.NpgsqlParameter})">
            <summary>
            Clean a list of SQL Parameters to fix up strings by calling <see>SqlTextClean()</see> for each parameter that is 
            NText, NVarChar, Test, VarChar.
            </summary>
            <param name="parameters">Parameters to clean</param>
            <returns></returns>
        </member>
        <member name="M:BlitzkriegSoftware.PgSql.PgSqlHelper.SqlTextClean(System.String)">
            <summary>
            Encodes apostrophe to two apostrophe keeping SQL statements from bombing
            </summary>
            <param name="inText">Text to clean</param>
            <returns>Clean text</returns>
        </member>
        <member name="M:BlitzkriegSoftware.PgSql.PgSqlHelper.ParameterBuilder(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            Parameter Builder
            </summary>
            <param name="name">Name, please include (at)</param>
            <param name="dbType">Type</param>
            <param name="value">Values</param>
            <returns>NpgsqlParameter</returns>
        </member>
    </members>
</doc>
